{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "spamassassin-test",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Email Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        240,
        304
      ],
      "webhookId": "spamassassin-test"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        480
      ],
      "id": "manual-trigger",
      "name": "Manual Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Fixed email data parsing - handles manual trigger and webhook\nconst emailData = $input.first();\nconsole.log('Input data received:', JSON.stringify(emailData, null, 2));\n\n// Handle both JSON body and form data\nlet emailContent, subject, sender;\n\n// Handle different input sources (manual trigger vs webhook)\nlet sourceData = emailData;\n\n// If this is webhook data (has body property), extract it\nif (emailData.body !== undefined) {\n  sourceData = emailData.body;\n  \n  // If body is a string (rawBody: true), try to parse it\n  if (typeof sourceData === 'string') {\n    try {\n      sourceData = JSON.parse(sourceData);\n      console.log('Successfully parsed JSON body');\n    } catch (e) {\n      console.log('Body is not valid JSON, treating as raw email content');\n      // sourceData remains as string\n    }\n  }\n} else {\n  // For manual triggers or direct JSON input, use the data as-is\n  console.log('Using direct input data (manual trigger)');\n}\n\n// Extract email content, subject, and sender\nif (sourceData && typeof sourceData === 'object') {\n  emailContent = sourceData.email || sourceData.content;\n  subject = sourceData.subject || 'Test Email';\n  sender = sourceData.sender || sourceData.from || 'test@example.com';\n} else if (typeof sourceData === 'string') {\n  // Raw email content as string\n  emailContent = sourceData;\n  subject = 'Test Email';\n  sender = 'test@example.com';\n} else {\n  // Fallback - no specific handling needed for node references\n  emailContent = null;\n  subject = 'Test Email';\n  sender = 'test@example.com';\n}\n\n// Default test email if nothing provided\nif (!emailContent) {\n  emailContent = `Subject: Test Email\nFrom: test@example.com\nTo: recipient@example.com\n\nThis is a test email for SpamAssassin scanning.\nIt contains normal content and should be classified as HAM (not spam).`;\n  console.log('Using default test email content');\n}\n\nconsole.log('Final processed data:', { email: emailContent, subject, sender });\n\nreturn {\n  email: emailContent,\n  subject: subject,\n  sender: sender,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare-email",
      "name": "Prepare Email Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        384
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://spamassassin-http-wrapper:9000/analyze",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{$json.email}}"
            },
            {
              "name": "subject",
              "value": "={{$json.subject}}"
            },
            {
              "name": "sender", 
              "value": "={{$json.sender}}"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxAttempts": 3,
            "waitBetween": 1000
          },
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": false
            }
          }
        }
      },
      "id": "spamassassin-http-scan",
      "name": "SpamAssassin HTTP Scan",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        688,
        384
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "classification-check",
              "leftValue": "={{ $json.classification }}",
              "rightValue": "SPAM",
              "operator": {
                "type": "string",
                "operation": "equals",
                "caseSensitive": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "spam-filter",
      "name": "Is Spam?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        912,
        384
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle SPAM classification\nconst result = $input.first();\n\nreturn {\n  status: 'BLOCKED',\n  classification: result.classification,\n  score: result.score,\n  threshold: result.threshold,\n  confidence: result.confidence,\n  action: result.action,\n  recommendation: result.recommendation,\n  method: result.method || 'HTTP',\n  details: result.details || [],\n  timestamp: new Date().toISOString(),\n  message: `Email blocked: ${result.recommendation}`\n};"
      },
      "id": "block-spam",
      "name": "Block SPAM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle HAM (legitimate email) classification\nconst result = $input.first();\n\nreturn {\n  status: 'ALLOWED',\n  classification: result.classification,\n  score: result.score,\n  threshold: result.threshold,\n  confidence: result.confidence,\n  action: result.action,\n  recommendation: result.recommendation,\n  method: result.method || 'HTTP',\n  details: result.details || [],\n  timestamp: new Date().toISOString(),\n  message: `Email allowed: ${result.recommendation}`\n};"
      },
      "id": "allow-ham",
      "name": "Allow HAM",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1136,
        464
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-blocked",
      "name": "Respond: Blocked",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1360,
        304
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-allowed",
      "name": "Respond: Allowed", 
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1360,
        464
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle scan errors\nconst error = $input.first();\n\nreturn {\n  status: 'ERROR',\n  classification: 'UNKNOWN',\n  error: error.error || 'Scan failed',\n  message: 'Email scanning failed - allowing by default for safety',\n  action: 'ALLOW',\n  recommendation: 'Manual review recommended',\n  timestamp: new Date().toISOString(),\n  fallback: true\n};"
      },
      "id": "handle-error",
      "name": "Handle Scan Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        912,
        544
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "respond-error",
      "name": "Respond: Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1136,
        544
      ]
    }
  ],
  "connections": {
    "Email Webhook": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Prepare Email Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Email Data": {
      "main": [
        [
          {
            "node": "SpamAssassin HTTP Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SpamAssassin HTTP Scan": {
      "main": [
        [
          {
            "node": "Is Spam?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Scan Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Spam?": {
      "main": [
        [
          {
            "node": "Block SPAM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Allow HAM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Block SPAM": {
      "main": [
        [
          {
            "node": "Respond: Blocked",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Allow HAM": {
      "main": [
        [
          {
            "node": "Respond: Allowed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Scan Error": {
      "main": [
        [
          {
            "node": "Respond: Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-23T17:00:00.000Z",
      "updatedAt": "2025-08-23T17:00:00.000Z",
      "id": "email-security",
      "name": "Email Security"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2025-08-23T17:00:00.000Z",
  "versionId": "http-wrapper-v1"
}
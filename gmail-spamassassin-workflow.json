{
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        -656,
        -352
      ],
      "id": "3b40cab8-29db-4efd-b709-fbab5df1b055",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "SsJuVoSMrBDBhC31",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Gmail message data parsing for SpamAssassin analysis\nconst gmailMessage = $input.first();\nconsole.log('Gmail message received:', JSON.stringify(gmailMessage, null, 2));\n\nlet emailContent, subject, sender, messageId;\n\n// Extract Gmail message data\nif (gmailMessage && gmailMessage.json) {\n  const messageData = gmailMessage.json;\n  \n  // Extract basic message info\n  messageId = messageData.id || messageData.messageId;\n  subject = messageData.subject || 'No Subject';\n  \n  // Extract sender - Gmail provides this in different formats\n  sender = messageData.from || \n           (messageData.payload && messageData.payload.headers && \n            messageData.payload.headers.find(h => h.name.toLowerCase() === 'from')?.value) ||\n           'unknown@sender.com';\n  \n  // Extract email content - Gmail message can have different structures\n  if (messageData.snippet) {\n    // Use snippet as fallback content\n    emailContent = `Subject: ${subject}\\nFrom: ${sender}\\n\\n${messageData.snippet}`;\n  }\n  \n  // Try to get full message body if available\n  if (messageData.payload) {\n    const payload = messageData.payload;\n    \n    // Handle different message structures\n    if (payload.body && payload.body.data) {\n      // Simple message with body data\n      try {\n        emailContent = Buffer.from(payload.body.data, 'base64').toString('utf8');\n      } catch (e) {\n        console.log('Could not decode base64 body, using snippet');\n      }\n    } else if (payload.parts) {\n      // Multi-part message - find text/plain or text/html part\n      let textPart = payload.parts.find(part => \n        part.mimeType === 'text/plain' || part.mimeType === 'text/html'\n      );\n      \n      if (textPart && textPart.body && textPart.body.data) {\n        try {\n          const decodedContent = Buffer.from(textPart.body.data, 'base64').toString('utf8');\n          emailContent = `Subject: ${subject}\\nFrom: ${sender}\\n\\n${decodedContent}`;\n        } catch (e) {\n          console.log('Could not decode multi-part body, using snippet');\n        }\n      }\n    }\n  }\n  \n  // Fallback to snippet if no body content found\n  if (!emailContent || emailContent.length < 50) {\n    emailContent = `Subject: ${subject}\\nFrom: ${sender}\\n\\n${messageData.snippet || 'Email content not available'}`;\n  }\n  \n} else {\n  // Fallback for unexpected data format\n  messageId = 'unknown';\n  subject = 'Gmail Parse Error';\n  sender = 'unknown@gmail.com';\n  emailContent = `Subject: ${subject}\\nFrom: ${sender}\\n\\nError parsing Gmail message data`;\n}\n\nconsole.log('Processed Gmail data:', { \n  messageId, \n  subject, \n  sender, \n  contentLength: emailContent.length \n});\n\nreturn {\n  messageId: messageId,\n  email: emailContent,\n  subject: subject,\n  sender: sender,\n  timestamp: new Date().toISOString(),\n  source: 'gmail'\n};"
      },
      "id": "1ef0e4bb-3ff9-459a-b8ae-74b8214e9a7a",
      "name": "Parse Gmail Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -352
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://spamassassin-http-wrapper:9000/analyze",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "email",
              "value": "={{$json.email}}"
            },
            {
              "name": "subject",
              "value": "={{$json.subject}}"
            },
            {
              "name": "sender",
              "value": "={{$json.sender}}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          },
          "timeout": 30000
        }
      },
      "id": "093de878-a289-4fd2-aa39-68ca4c756f9c",
      "name": "SpamAssassin HTTP Scan",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -208,
        -352
      ],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "classification-check",
              "leftValue": "={{ $json.classification }}",
              "rightValue": "SPAM",
              "operator": {
                "type": "string",
                "operation": "equals",
                "caseSensitive": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ea735e81-e889-475e-8df4-b14d4c364844",
      "name": "Is Spam?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        16,
        -352
      ]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "addLabels",
        "messageId": "={{ $('Parse Gmail Message').first().json.messageId }}",
        "labelIds": [
          "SPAM"
        ]
      },
      "id": "26d2d821-cf46-4e6d-a7bf-0eb03a5ff16d",
      "name": "Label as SPAM",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        240,
        -448
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "SsJuVoSMrBDBhC31",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "addLabels", 
        "messageId": "={{ $('Parse Gmail Message').first().json.messageId }}",
        "labelIds": [
          "INBOX"
        ]
      },
      "id": "93389546-71d8-442d-8f27-c49c83f15500",
      "name": "Keep in Inbox",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        240,
        -256
      ],
      "credentials": {
        "gmailOAuth2": {
          "id": "SsJuVoSMrBDBhC31",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log SPAM action\nconst scanResult = $('SpamAssassin HTTP Scan').first().json;\nconst gmailData = $('Parse Gmail Message').first().json;\n\nconsole.log(`SPAM DETECTED - Message ID: ${gmailData.messageId}`);\nconsole.log(`Subject: ${gmailData.subject}`);\nconsole.log(`Sender: ${gmailData.sender}`);\nconsole.log(`Score: ${scanResult.score}/${scanResult.threshold}`);\nconsole.log(`Details: ${JSON.stringify(scanResult.details)}`);\n\nreturn {\n  action: 'SPAM_LABELED',\n  messageId: gmailData.messageId,\n  subject: gmailData.subject,\n  sender: gmailData.sender,\n  classification: scanResult.classification,\n  score: scanResult.score,\n  threshold: scanResult.threshold,\n  confidence: scanResult.confidence,\n  details: scanResult.details || [],\n  timestamp: new Date().toISOString(),\n  message: 'Email labeled as SPAM in Gmail'\n};"
      },
      "id": "9020b989-cc90-4d33-b030-b8dde2bfaa16",
      "name": "Log SPAM Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        -448
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log HAM action\nconst scanResult = $('SpamAssassin HTTP Scan').first().json;\nconst gmailData = $('Parse Gmail Message').first().json;\n\nconsole.log(`HAM DETECTED - Message ID: ${gmailData.messageId}`);\nconsole.log(`Subject: ${gmailData.subject}`);\nconsole.log(`Sender: ${gmailData.sender}`);\nconsole.log(`Score: ${scanResult.score}/${scanResult.threshold}`);\n\nreturn {\n  action: 'HAM_ALLOWED',\n  messageId: gmailData.messageId,\n  subject: gmailData.subject,\n  sender: gmailData.sender,\n  classification: scanResult.classification,\n  score: scanResult.score,\n  threshold: scanResult.threshold,\n  confidence: scanResult.confidence,\n  details: scanResult.details || [],\n  timestamp: new Date().toISOString(),\n  message: 'Email kept in inbox as legitimate'\n};"
      },
      "id": "d822ce6b-8d0a-420b-a2e7-79a5e60d1895",
      "name": "Log HAM Action",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        -256
      ]
    },
    {
      "parameters": {
        "jsCode": "// Handle scan errors - default to allowing email\nconst gmailData = $('Parse Gmail Message').first().json;\nconst error = $input.first();\n\nconsole.log(`SCAN ERROR - Message ID: ${gmailData.messageId}`);\nconsole.log(`Error: ${error.error || 'Unknown error'}`);\nconsole.log(`Defaulting to ALLOW for safety`);\n\nreturn {\n  action: 'ERROR_ALLOW',\n  messageId: gmailData.messageId,\n  subject: gmailData.subject,\n  sender: gmailData.sender,\n  classification: 'UNKNOWN',\n  error: error.error || 'Scan failed',\n  message: 'Email scanning failed - left in inbox for safety',\n  recommendation: 'Manual review recommended',\n  timestamp: new Date().toISOString(),\n  fallback: true\n};"
      },
      "id": "handle-error",
      "name": "Handle Scan Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -64
      ]
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Parse Gmail Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gmail Message": {
      "main": [
        [
          {
            "node": "SpamAssassin HTTP Scan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SpamAssassin HTTP Scan": {
      "main": [
        [
          {
            "node": "Is Spam?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Scan Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Spam?": {
      "main": [
        [
          {
            "node": "Label as SPAM",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Keep in Inbox",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Label as SPAM": {
      "main": [
        [
          {
            "node": "Log SPAM Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keep in Inbox": {
      "main": [
        [
          {
            "node": "Log HAM Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-23T19:00:00.000Z",
      "updatedAt": "2025-08-23T19:00:00.000Z", 
      "id": "gmail-spam-filter",
      "name": "Gmail Spam Filter"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-08-23T19:00:00.000Z",
  "versionId": "gmail-v1"
}